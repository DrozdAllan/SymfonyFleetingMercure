{% extends "base.html.twig" %}

{% block body %}

	
<div class="container">


https://stripe.com/docs/billing/subscriptions/checkout
	<h4>Abonnement mensuel Fleeting VIP</h4>
  <div>En vous abonnant au statut VIP, vous consentez à un prélèvement mensuel de 34.90€ par mois, vous pouvez à tout moment stopper cet abonnement en vous rendant dans votre profil</div>
    <div>Pour le compte de</div>
    <div id="mail">stripetest@gmail.com</div>

  <form id="subscription-form">
    <div id="card-element">
      <!-- Elements will create input elements here -->
    </div>

    <!-- We'll put the error messages in this element -->
    <div id="card-element-errors" role="alert"></div>
    <button type="submit">Subscribe</button>
  </form>
	

</div>

{% endblock %}


{% block javascripts %}
<script src="https://js.stripe.com/v3/"></script>

	<script>
    const stripe = Stripe('{{stripePublicKey}}');
    const redirectSuccessUrl = "{{ url('checkoutsuccess') }}";
	</script>

<script>
const elements = stripe.elements();

const card = elements.create('card');
card.mount('#card-element');

const form = document.getElementById('subscription-form');

const billingMail = document.getElementById('mail');

form.addEventListener("submit", function (event) {
  event.preventDefault();
  // Complete payment when the submit button is clicked
  stripe
    .createPaymentMethod({
      type: 'card',
      card: card,
      billing_details: {
        email: billingMail,
      },
    })
    .then((result) => {
      if (result.error) {
        displayError(result);
      } else {
        createSubscription({
            customerId: "{{customerId}}",
            paymentMethodId: result.paymentMethod.id,
            priceId: "price_1IkDp4DTsj5RSWQCno9DR63U",
        })
        // If the card is declined, display an error to the user.
      .then((result) => {
        if (result.error) {
          // The card had an error when trying to attach it to a customer.
          throw result;
        }
        return result;
      })
      // Normalize the result to contain the object returned by Stripe.
      // Add the additional details we need.
      .then((result) => {
        return {
          paymentMethodId: paymentMethodId,
          priceId: priceId,
          subscription: result,
        };
      })
      // Some payment methods require a customer to be on session
      // to complete the payment process. Check the status of the
      // payment intent to handle these actions.
      .then(handlePaymentThatRequiresCustomerAction)
      // If attaching this card to a Customer object succeeds,
      // but attempts to charge the customer fail, you
      // get a requires_payment_method error.
      .then(handleRequiresPaymentMethod)
      // No more actions required. Provision your service for the user.
      .then(onSubscriptionComplete)
      .catch((error) => {
        // An error has happened. Display the failure to the user here.
        // We utilize the HTML element we created.
        showCardError(error);
      })
        // window.location.href = redirectSuccessUrl;
      }
    });
});
</script>
{% endblock %}